this is the first text document
changes made ///
to commit directly we do git commit -a -m "commit message"
git diff : only the diff between file before modified and after modified (unstaged same files only)
git diff --staged : shows diff between staged files (same files)
renaming file : git mv <original file name> <changed file name>
delete file after committed : git rm <file name>
delete at staging area : git rm -f <file name>
staged -> unstaged = git restore --staged <file name>
modified -> unmodified = git restore <file name>
tracked -> untracked = git rm --cached <file name>
log functions :
git log shows all commit history 
git log -p = diff b/w the commits
git log --since=<date>
git log --pretty=format"format words"
git log help = helps to know all git functioning
to create shortforms of any command use 
git config --global alias.<short cut command> actual command
to add a file from local(our computer to git) follow this command git remote add origin and then the url from github (repo created of same name)
then do git push origin main to push it in github
git pull origin main : to make changes made in repo at github to reflect on our local system that is git
to create branch, rename, delete check current one 
new branch : git checkout -b <branch name>
rename : git branch -m <old branch name> <new branch name> [if not used old branch name new branch will be created]
delete : git branch -d <branch to delete> force delete : git branch -D <branch name>
to check : git branch
for merging branch in git 
git merge <branch name> [to solve conflicts we have choose among the current and incoming changes between files] [one time changes if we want oyr further changes to reflect we have to keep merging]
to check the last commit of branches = git branch -v
to check which branches are merged = git branch --merged not merged = git branch --no-merged

